<?phpnamespace App\Http\Controllers;use App\User;use Google\Protobuf\Internal\GPBType;use Google\Protobuf\Internal\RepeatedField;use Illuminate\Support\Facades\DB;use Xxgame\Playerinfo;use Xxgame\TeaInfo;use Xxgame\TeaList;use Xxgame\TeaPlayer;use Xxgame\TeaPlayerList;use Aliyun\DySDKLite\SignatureHelper;class GameSericeController extends Controller{    ///获取茶楼列表    /// $uid：玩家ID    /// $key：KEY    public function GetTeaList($uid,$sign){        try{            //验证签名            if(!$this->checkSign($sign)) return "";            if(empty($uid)) return "";            $sql =<<<EOT                select t.* from xx_sys_tea t left join xx_sys_teas s on  s.tea_id=t.tea_id where s.uid=$uidEOT;            $tea_data = DB::select($sql);            if(empty($tea_data)) return "";            $tesList = new TeaList();            $tea_rf = new RepeatedField(GPBType::MESSAGE, \Xxgame\TeaInfo::class);            foreach ($tea_data as $tea){                $teainfo = new TeaInfo();                $teainfo->setTeaId($tea->tea_id);                $teainfo->setUid($tea->uid);                $teainfo->setForbid($tea->forbid);                $teainfo->setMsg($tea->msg);                $teainfo->setTeaName($tea->tea_name);                $teainfo->setMethod1($tea->method1);                $teainfo->setType1($tea->type1);                $teainfo->setHall1($tea->hall1);                $teainfo->setMethod2($tea->method2);                $teainfo->setType2($tea->type2);                $teainfo->setHall2($tea->hall2);                $teainfo->setMethod3($tea->method3);                $teainfo->setType3($tea->type3);                $teainfo->setHall3($tea->hall3);                $tea_rf->offsetSet(null, $teainfo);            }            $tesList->setTeaList($tea_rf);            return $tesList->encode();        }catch (\Exception $e){            return "";        }    }    ///获取茶楼玩家列表    /// $teaid：茶楼ID    /// $key：KEY    public function GetTeaPlayerList($teaid,$sign){        try{            //验证签名            if(!$this->checkSign($sign)) return "";            if(empty($teaid)) return "";            $sql = <<<EOT            select t.*,u.nickname,u.online_state from xx_sys_teas t left join xx_user u on  u.uid=t.uid where t.tea_id = $teaidEOT;            $player_data =  DB::select($sql);            if(empty($player_data)) return "";            $teaPlayerList =  new TeaPlayerList();            $player_rf = new RepeatedField(GPBType::MESSAGE, \Xxgame\TeaPlayer::class);            foreach ($player_data as $player){                $teaplayer = new TeaPlayer();                $teaplayer->setTeaId($player->tea_id);                $teaplayer->setNickname($player->nickname);                $teaplayer->setUid($player->uid);                $teaplayer->setState($player->state);                $teaplayer->setManager($player->manager);                $teaplayer->setHallId($player->hall_id);                $teaplayer->setWinnum($player->winnum);                $teaplayer->setRemarks($player->remarks);                $teaplayer->setNumbers($player->numbers);                $teaplayer->setDate($player->create_time);                $teaplayer->setOnline($player->online_state);                $player_rf->offsetSet(null,$teaplayer);            }            $teaPlayerList->setPlayerList($player_rf);            return $teaPlayerList->encode();        }catch (\Exception $e){            return "";        }    }    ///修改茶楼玩家备注    /// $teaid：茶楼ID    /// $uid：玩家ID    /// $remark：备注内容    /// $key：KEY    public function updateRemark($teaid,$uid,$remark,$sign){        try{            //验证签名            if(!$this->checkSign($sign)) return "0";            if(empty($teaid) || empty($uid)) return "0";            DB::table("xx_sys_teas")->where([['tea_id',$teaid],['uid',$uid]])->update(['remarks'=>$remark]);            return "1";        }catch (\Exception $e){            return "0";        }    }    //验证签名方法    private  function checkSign($sign){        try{            if(empty($sign)) return false;            if(decrypt($sign) == env('SIGN'))                return true;            else                return false;        }catch (\Exception $e){            return false;        }    }    ///获取版本号    /// $version：版本号    /// $type：系统平台1：苹果；2：安卓    /// $res：资源    /// $src：资源地址    public function GetVersion($version,$type){        $ret = "";        if($type==1) { //苹果版            if ($version == 2.0) {                $ret = "2";            } else {                if($version < 1.0){                    $ret = "1";                }else{                    $ret = "0";                }            }        }else if($type==2){           if($version < 1.0){                $ret = "1";            }else{                $ret = "0";            }        }else{ }        if($ret=="0"){            $ret .= "|1|1|1";        }        return $ret;    }    ///获取回放数据    /// $gtype：游戏类型    /// $rid：战绩ID    /// $sign：签名    public function getPlayback($gtype,$rid,$sign){        try{            //验证签名            if(!$this->checkSign($sign)) return "";            if(empty($gtype) || empty($rid)) return "";            $gamt_type = config('conf.GameType');            $table = $gamt_type->get($gtype);            return DB::table($table)->where('record_id',$rid)->value('playback');        }catch (\Exception $e){            return "";        }    }    ///获取玩家的总战绩    /// $uid：玩家ID    /// $g_type：游戏类型    /// $sign：签名    public function GetRecord($g_type,$uid,$sign){        try{            //验证签名            if(!$this->checkSign($sign)) return "";            if(empty($uid) || empty($g_type)) return "";        }catch (\Exception $e){            return "";        }    }    ///获取玩家大局战绩    /// $roomid：房间号    /// $time：开房时间    /// $g_type：游戏类型    /// $sign：签名    public function BigRecord($roomid,$time,$g_type,$sign){        try{            //验证签名            if(!$this->checkSign($sign)) return "";            if(empty($roomid) || empty($time) || empty($g_type)) return "";        }catch (\Exception $e){            return "";        }    }    ///短信发送    /// $uid:玩家ID    /// $type:发送类型    public function sendSms($uid,$type){        try{            $params = array ();            // *** 需用户填写部分 ***            // fixme 必填: 请参阅 https://ak-console.aliyun.com/ 取得您的AK信息            $accessKeyId = "your access key id";            $accessKeySecret = "your access key secret";            // fixme 必填: 短信接收号码            if(empty($uid)) return;            $player = DB::table('xx_user')->where('uid',$uid)->first();            if(empty($player->uphone)) return;            $params["PhoneNumbers"] = $player->uphone;            // fixme 必填: 短信签名，应严格按"签名名称"填写，请参考: https://dysms.console.aliyun.com/dysms.htm#/develop/sign            $params["SignName"] = "短信签名";            // fixme 必填: 短信模板Code，应严格按"模板CODE"填写, 请参考: https://dysms.console.aliyun.com/dysms.htm#/develop/template            if($type=="prompt"){                $params["TemplateCode"] = "SMS_0000001";            }//////            // fixme 可选: 设置模板参数, 假如模板中存在变量需要替换则为必填项//            $params['TemplateParam'] = Array (//                "code" => "12345",//                "product" => "阿里通信"//            );            // *** 需用户填写部分结束, 以下代码若无必要无需更改 ***            if(!empty($params["TemplateParam"]) && is_array($params["TemplateParam"])) {                $params["TemplateParam"] = json_encode($params["TemplateParam"], JSON_UNESCAPED_UNICODE);            }            // 初始化SignatureHelper实例用于设置参数，签名以及发送请求            $helper = new SignatureHelper();            // 此处可能会抛出异常，注意catch            $content = $helper->request(                $accessKeyId,                $accessKeySecret,                "dysmsapi.aliyuncs.com",                array_merge($params, array(                    "RegionId" => "cn-hangzhou",                    "Action" => "SendSms",                    "Version" => "2017-05-25",                ))            );            return $content;        }catch (\Exception $e){        }    }}